@startumlabstract DataAsset{  AccountName: Owner  String256: AssetSinature  ID:DataAssetID  Time :RegisterTime  Struct Status{  Int:ConsumedTimes,  Enum:LastCurrentStatus::Registering,Registered,Exchanging,Exchanged,Invalid)}  String:DataStoreID  BigInt: Nonce  Action:ActionList  getAccountName()  setAccountName()  setStatus()  getStatus()}class AIDataAsset{ Enum: AIDomain :: JsonObject: DataModel {   StringList: DataPropertyDigest   String:  Subscripttion   Enumn:ApplicationDomain::Industry,HumanReconginization,Medical....   enmu:DataType::text,video,voice...}  construct(const DataModel)  getDataItem()}class DataStore{  Enum:StorageType::dbtype(mysql,sqllite...）,filesystemtype（local file,ipfs.....）  VariantObject: Store::FileCollection,DBStorage  String:DataStoreID  Time:StoreTime  Bool: EncryptionNeeded  Bool: CompressedNeeded  construct(const Storagetype)}class File{  String:FileName  String：MAC  Int：sizes （KB）  String：filePath}class DataRequirement{   ID: DataRequirementID   string：DataRequirementName   String: originator   JsonObject: DataModel   Eumu:status ::valid，invalid   Time：ExpirationTime   Time：PublishedTime   Int： bidmoney   LongInt：Nonce   String256: RequirementSinature   DataStoreID:DataSampleRef   String: refContract}class DataAssetCollection{Array DataAssetIDQueryByIDQuerybyOwner（）QuerybyStatus（）QuerybyRegTime（）QuerybyDataType（）Add（）}class FileCollection{   Int：fileNums   struct FileAccess{ip,accessModde,file,accessAuth}   Array FilesAccessList}class Fileshard{暂时不做}class DataReqStoreclass DataReqCollection{Array DataRequirementIDQuerybyOwner（）QuerybyIDQuerybyStatus（）QuerybyPublishedTime（）QuerybyDataType（）QuerybyBidMoney（）Add（）}class DBStorage{  class DBConnection: dbcon;  array dataIndex  dataStore()  dataGet()}DataAsset <|--AIDataAssetDataAssetCollection  o-- DataAssetDataAsset <-->DataStoreFileCollection --|> DataStoreDBStorage --|> DataStoreFileCollection o--FileFile *-- FileshardDataReqCollection o-- DataRequirementDataRequirement <|-- DataReqStoreDataRequirement<--->DataRequirementContractDataReqCollection<--->DataReqManageContractDataStore<-->DataStoreContractDataAsset<-->DataAssetContractAIDataAsset<-->AIDataAssetContract@enduml