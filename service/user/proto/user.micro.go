// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user.proto

/*
Package user is a generated protocol buffer package.

It is generated from these files:
	user.proto

It has these top-level messages:
	PushTxRequest
	PushTxResponse
	RegisterRequest
	AccountInfo
	UserInfo
	RegisterResponse
	LoginRequest
	LoginResponse
	GetBlockHeaderRequest
	GetBlockHeaderResponse
	BlockHeader
	GetAccountInfoRequest
	GetAccountInfoResponse
	AccountInfoData
	FavoriteRequest
	FavoriteResponse
	GetFavoriteRequest
	GetFavoriteResponse
	FavoriteArr
	FavoriteData
	GetBalanceRequest
	GetBalanceResponse
	GetBalanceRow
	Position
	QueryMyBuyRequest
	QueryMyBuyResponse
	BuyData
	Buy
	GetTransferRequest
	GetTransferResponse
	TransferListData
	Transfer
*/
package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for User service

type UserClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	GetBlockHeader(ctx context.Context, in *GetBlockHeaderRequest, opts ...client.CallOption) (*GetBlockHeaderResponse, error)
	GetAccountInfo(ctx context.Context, in *GetAccountInfoRequest, opts ...client.CallOption) (*GetAccountInfoResponse, error)
	Favorite(ctx context.Context, in *FavoriteRequest, opts ...client.CallOption) (*FavoriteResponse, error)
	GetFavorite(ctx context.Context, in *GetFavoriteRequest, opts ...client.CallOption) (*GetFavoriteResponse, error)
	Transfer(ctx context.Context, in *PushTxRequest, opts ...client.CallOption) (*PushTxResponse, error)
	GetTransfer(ctx context.Context, in *GetTransferRequest, opts ...client.CallOption) (*GetTransferResponse, error)
	QueryMyBuy(ctx context.Context, in *QueryMyBuyRequest, opts ...client.CallOption) (*QueryMyBuyResponse, error)
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...client.CallOption) (*GetBalanceResponse, error)
}

type userClient struct {
	c           client.Client
	serviceName string
}

func NewUserClient(serviceName string, c client.Client) UserClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "user"
	}
	return &userClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *userClient) Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.Register", in)
	out := new(RegisterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.Login", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetBlockHeader(ctx context.Context, in *GetBlockHeaderRequest, opts ...client.CallOption) (*GetBlockHeaderResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.GetBlockHeader", in)
	out := new(GetBlockHeaderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetAccountInfo(ctx context.Context, in *GetAccountInfoRequest, opts ...client.CallOption) (*GetAccountInfoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.GetAccountInfo", in)
	out := new(GetAccountInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Favorite(ctx context.Context, in *FavoriteRequest, opts ...client.CallOption) (*FavoriteResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.Favorite", in)
	out := new(FavoriteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetFavorite(ctx context.Context, in *GetFavoriteRequest, opts ...client.CallOption) (*GetFavoriteResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.GetFavorite", in)
	out := new(GetFavoriteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Transfer(ctx context.Context, in *PushTxRequest, opts ...client.CallOption) (*PushTxResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.Transfer", in)
	out := new(PushTxResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetTransfer(ctx context.Context, in *GetTransferRequest, opts ...client.CallOption) (*GetTransferResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.GetTransfer", in)
	out := new(GetTransferResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) QueryMyBuy(ctx context.Context, in *QueryMyBuyRequest, opts ...client.CallOption) (*QueryMyBuyResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.QueryMyBuy", in)
	out := new(QueryMyBuyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...client.CallOption) (*GetBalanceResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.GetBalance", in)
	out := new(GetBalanceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	Register(context.Context, *RegisterRequest, *RegisterResponse) error
	Login(context.Context, *LoginRequest, *LoginResponse) error
	GetBlockHeader(context.Context, *GetBlockHeaderRequest, *GetBlockHeaderResponse) error
	GetAccountInfo(context.Context, *GetAccountInfoRequest, *GetAccountInfoResponse) error
	Favorite(context.Context, *FavoriteRequest, *FavoriteResponse) error
	GetFavorite(context.Context, *GetFavoriteRequest, *GetFavoriteResponse) error
	Transfer(context.Context, *PushTxRequest, *PushTxResponse) error
	GetTransfer(context.Context, *GetTransferRequest, *GetTransferResponse) error
	QueryMyBuy(context.Context, *QueryMyBuyRequest, *QueryMyBuyResponse) error
	GetBalance(context.Context, *GetBalanceRequest, *GetBalanceResponse) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&User{hdlr}, opts...))
}

type User struct {
	UserHandler
}

func (h *User) Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error {
	return h.UserHandler.Register(ctx, in, out)
}

func (h *User) Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error {
	return h.UserHandler.Login(ctx, in, out)
}

func (h *User) GetBlockHeader(ctx context.Context, in *GetBlockHeaderRequest, out *GetBlockHeaderResponse) error {
	return h.UserHandler.GetBlockHeader(ctx, in, out)
}

func (h *User) GetAccountInfo(ctx context.Context, in *GetAccountInfoRequest, out *GetAccountInfoResponse) error {
	return h.UserHandler.GetAccountInfo(ctx, in, out)
}

func (h *User) Favorite(ctx context.Context, in *FavoriteRequest, out *FavoriteResponse) error {
	return h.UserHandler.Favorite(ctx, in, out)
}

func (h *User) GetFavorite(ctx context.Context, in *GetFavoriteRequest, out *GetFavoriteResponse) error {
	return h.UserHandler.GetFavorite(ctx, in, out)
}

func (h *User) Transfer(ctx context.Context, in *PushTxRequest, out *PushTxResponse) error {
	return h.UserHandler.Transfer(ctx, in, out)
}

func (h *User) GetTransfer(ctx context.Context, in *GetTransferRequest, out *GetTransferResponse) error {
	return h.UserHandler.GetTransfer(ctx, in, out)
}

func (h *User) QueryMyBuy(ctx context.Context, in *QueryMyBuyRequest, out *QueryMyBuyResponse) error {
	return h.UserHandler.QueryMyBuy(ctx, in, out)
}

func (h *User) GetBalance(ctx context.Context, in *GetBalanceRequest, out *GetBalanceResponse) error {
	return h.UserHandler.GetBalance(ctx, in, out)
}
