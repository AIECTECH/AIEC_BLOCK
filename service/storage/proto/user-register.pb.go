// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/code/bottos/service/storage/proto/user-register.proto

package storage

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type UserInfoRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
}

func (m *UserInfoRequest) Reset()                    { *m = UserInfoRequest{} }
func (m *UserInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*UserInfoRequest) ProtoMessage()               {}
func (*UserInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *UserInfoRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type UserInfoResponse struct {
	Accountname    string `protobuf:"bytes,1,opt,name=accountname" json:"accountname,omitempty"`
	OwnerPubKey    string `protobuf:"bytes,2,opt,name=owner_pub_key,json=ownerPubKey" json:"owner_pub_key,omitempty"`
	ActivePubKey   string `protobuf:"bytes,3,opt,name=active_pub_key,json=activePubKey" json:"active_pub_key,omitempty"`
	EncyptedInfo   string `protobuf:"bytes,4,opt,name=encypted_info,json=encyptedInfo" json:"encypted_info,omitempty"`
	UserType       string `protobuf:"bytes,5,opt,name=user_type,json=userType" json:"user_type,omitempty"`
	RoleType       string `protobuf:"bytes,6,opt,name=role_type,json=roleType" json:"role_type,omitempty"`
	CompanyName    string `protobuf:"bytes,7,opt,name=company_name,json=companyName" json:"company_name,omitempty"`
	CompanyAddress string `protobuf:"bytes,8,opt,name=company_address,json=companyAddress" json:"company_address,omitempty"`
}

func (m *UserInfoResponse) Reset()                    { *m = UserInfoResponse{} }
func (m *UserInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*UserInfoResponse) ProtoMessage()               {}
func (*UserInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *UserInfoResponse) GetAccountname() string {
	if m != nil {
		return m.Accountname
	}
	return ""
}

func (m *UserInfoResponse) GetOwnerPubKey() string {
	if m != nil {
		return m.OwnerPubKey
	}
	return ""
}

func (m *UserInfoResponse) GetActivePubKey() string {
	if m != nil {
		return m.ActivePubKey
	}
	return ""
}

func (m *UserInfoResponse) GetEncyptedInfo() string {
	if m != nil {
		return m.EncyptedInfo
	}
	return ""
}

func (m *UserInfoResponse) GetUserType() string {
	if m != nil {
		return m.UserType
	}
	return ""
}

func (m *UserInfoResponse) GetRoleType() string {
	if m != nil {
		return m.RoleType
	}
	return ""
}

func (m *UserInfoResponse) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *UserInfoResponse) GetCompanyAddress() string {
	if m != nil {
		return m.CompanyAddress
	}
	return ""
}

type UserNumRequest struct {
}

func (m *UserNumRequest) Reset()                    { *m = UserNumRequest{} }
func (m *UserNumRequest) String() string            { return proto.CompactTextString(m) }
func (*UserNumRequest) ProtoMessage()               {}
func (*UserNumRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

type UserNumResponse struct {
	Num uint32 `protobuf:"varint,1,opt,name=num" json:"num,omitempty"`
}

func (m *UserNumResponse) Reset()                    { *m = UserNumResponse{} }
func (m *UserNumResponse) String() string            { return proto.CompactTextString(m) }
func (*UserNumResponse) ProtoMessage()               {}
func (*UserNumResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *UserNumResponse) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type InsertTokenRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *InsertTokenRequest) Reset()                    { *m = InsertTokenRequest{} }
func (m *InsertTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*InsertTokenRequest) ProtoMessage()               {}
func (*InsertTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *InsertTokenRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *InsertTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type InsertTokenResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *InsertTokenResponse) Reset()                    { *m = InsertTokenResponse{} }
func (m *InsertTokenResponse) String() string            { return proto.CompactTextString(m) }
func (*InsertTokenResponse) ProtoMessage()               {}
func (*InsertTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *InsertTokenResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type TokenRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
}

func (m *TokenRequest) Reset()                    { *m = TokenRequest{} }
func (m *TokenRequest) String() string            { return proto.CompactTextString(m) }
func (*TokenRequest) ProtoMessage()               {}
func (*TokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *TokenRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type TokenResponse struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *TokenResponse) Reset()                    { *m = TokenResponse{} }
func (m *TokenResponse) String() string            { return proto.CompactTextString(m) }
func (*TokenResponse) ProtoMessage()               {}
func (*TokenResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *TokenResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*UserInfoRequest)(nil), "storage.UserInfoRequest")
	proto.RegisterType((*UserInfoResponse)(nil), "storage.UserInfoResponse")
	proto.RegisterType((*UserNumRequest)(nil), "storage.UserNumRequest")
	proto.RegisterType((*UserNumResponse)(nil), "storage.UserNumResponse")
	proto.RegisterType((*InsertTokenRequest)(nil), "storage.InsertTokenRequest")
	proto.RegisterType((*InsertTokenResponse)(nil), "storage.InsertTokenResponse")
	proto.RegisterType((*TokenRequest)(nil), "storage.TokenRequest")
	proto.RegisterType((*TokenResponse)(nil), "storage.TokenResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserRegister service

type UserRegisterClient interface {
	GetUserInfo(ctx context.Context, in *UserInfoRequest, opts ...client.CallOption) (*UserInfoResponse, error)
	GetUserNum(ctx context.Context, in *UserNumRequest, opts ...client.CallOption) (*UserNumResponse, error)
	InsertUserToken(ctx context.Context, in *InsertTokenRequest, opts ...client.CallOption) (*InsertTokenResponse, error)
	GetUserToken(ctx context.Context, in *TokenRequest, opts ...client.CallOption) (*TokenResponse, error)
}

type userRegisterClient struct {
	c           client.Client
	serviceName string
}

func NewUserRegisterClient(serviceName string, c client.Client) UserRegisterClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "storage"
	}
	return &userRegisterClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *userRegisterClient) GetUserInfo(ctx context.Context, in *UserInfoRequest, opts ...client.CallOption) (*UserInfoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserRegister.GetUserInfo", in)
	out := new(UserInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegisterClient) GetUserNum(ctx context.Context, in *UserNumRequest, opts ...client.CallOption) (*UserNumResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserRegister.GetUserNum", in)
	out := new(UserNumResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegisterClient) InsertUserToken(ctx context.Context, in *InsertTokenRequest, opts ...client.CallOption) (*InsertTokenResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserRegister.InsertUserToken", in)
	out := new(InsertTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegisterClient) GetUserToken(ctx context.Context, in *TokenRequest, opts ...client.CallOption) (*TokenResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserRegister.GetUserToken", in)
	out := new(TokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserRegister service

type UserRegisterHandler interface {
	GetUserInfo(context.Context, *UserInfoRequest, *UserInfoResponse) error
	GetUserNum(context.Context, *UserNumRequest, *UserNumResponse) error
	InsertUserToken(context.Context, *InsertTokenRequest, *InsertTokenResponse) error
	GetUserToken(context.Context, *TokenRequest, *TokenResponse) error
}

func RegisterUserRegisterHandler(s server.Server, hdlr UserRegisterHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&UserRegister{hdlr}, opts...))
}

type UserRegister struct {
	UserRegisterHandler
}

func (h *UserRegister) GetUserInfo(ctx context.Context, in *UserInfoRequest, out *UserInfoResponse) error {
	return h.UserRegisterHandler.GetUserInfo(ctx, in, out)
}

func (h *UserRegister) GetUserNum(ctx context.Context, in *UserNumRequest, out *UserNumResponse) error {
	return h.UserRegisterHandler.GetUserNum(ctx, in, out)
}

func (h *UserRegister) InsertUserToken(ctx context.Context, in *InsertTokenRequest, out *InsertTokenResponse) error {
	return h.UserRegisterHandler.InsertUserToken(ctx, in, out)
}

func (h *UserRegister) GetUserToken(ctx context.Context, in *TokenRequest, out *TokenResponse) error {
	return h.UserRegisterHandler.GetUserToken(ctx, in, out)
}

func init() {
	proto.RegisterFile("github.com/code/bottos/service/storage/proto/user-register.proto", fileDescriptor2)
}

var fileDescriptor2 = []byte{
	// 466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xdb, 0x6e, 0xd3, 0x40,
	0x14, 0x24, 0x29, 0x4d, 0xdb, 0x53, 0xe7, 0xa2, 0x05, 0x8a, 0x49, 0x79, 0x28, 0x5b, 0x10, 0x08,
	0x29, 0xb1, 0x04, 0x1f, 0x00, 0x95, 0x10, 0xa8, 0x42, 0x8a, 0x50, 0x54, 0x9e, 0x2d, 0x7b, 0x73,
	0x1a, 0xac, 0xd6, 0xbb, 0x66, 0x2f, 0x45, 0xfe, 0x23, 0xf8, 0x4b, 0xb4, 0x17, 0x3b, 0x71, 0xdb,
	0x87, 0xbe, 0x65, 0x67, 0x66, 0x67, 0xe7, 0x4c, 0x8e, 0xe1, 0xf3, 0xba, 0xd0, 0xbf, 0x4c, 0x3e,
	0x67, 0xa2, 0x4c, 0x98, 0x58, 0x61, 0x92, 0x0b, 0xad, 0x85, 0x4a, 0x14, 0xca, 0x9b, 0x82, 0x61,
	0xa2, 0xb4, 0x90, 0xd9, 0x1a, 0x93, 0x4a, 0x0a, 0x2d, 0x12, 0xa3, 0x50, 0xce, 0x24, 0xae, 0x0b,
	0xa5, 0x51, 0xce, 0x1d, 0x46, 0xf6, 0x82, 0x84, 0xce, 0x60, 0xfc, 0x53, 0xa1, 0x3c, 0xe7, 0x97,
	0x62, 0x89, 0xbf, 0x0d, 0x2a, 0x4d, 0xa6, 0xb0, 0x6f, 0xaf, 0xf0, 0xac, 0xc4, 0xb8, 0x77, 0xd2,
	0x7b, 0x77, 0xb0, 0x6c, 0xcf, 0xf4, 0x5f, 0x1f, 0x26, 0x1b, 0xbd, 0xaa, 0x04, 0x57, 0x48, 0x4e,
	0xe0, 0x30, 0x63, 0x4c, 0x18, 0xae, 0xb7, 0xee, 0x6c, 0x43, 0x84, 0xc2, 0x50, 0xfc, 0xe1, 0x28,
	0xd3, 0xca, 0xe4, 0xe9, 0x15, 0xd6, 0x71, 0xdf, 0x6b, 0x1c, 0xf8, 0xc3, 0xe4, 0xdf, 0xb1, 0x26,
	0xaf, 0x61, 0x94, 0x31, 0x5d, 0xdc, 0x60, 0x2b, 0xda, 0x71, 0xa2, 0xc8, 0xa3, 0x41, 0x75, 0x0a,
	0x43, 0xe4, 0xac, 0xae, 0x34, 0xae, 0xd2, 0x82, 0x5f, 0x8a, 0xf8, 0xb1, 0x17, 0x35, 0xa0, 0x0d,
	0x46, 0x8e, 0xe1, 0xc0, 0x26, 0x4e, 0x75, 0x5d, 0x61, 0xbc, 0xbb, 0x19, 0xe1, 0xa2, 0xae, 0xd0,
	0x92, 0x52, 0x5c, 0xa3, 0x27, 0x07, 0x9e, 0xb4, 0x80, 0x23, 0x5f, 0x41, 0xc4, 0x44, 0x59, 0x65,
	0xbc, 0x4e, 0xdd, 0x2c, 0x7b, 0x3e, 0x67, 0xc0, 0x16, 0x76, 0x96, 0xb7, 0x30, 0x6e, 0x24, 0xd9,
	0x6a, 0x25, 0x51, 0xa9, 0x78, 0xdf, 0xa9, 0x46, 0x01, 0x3e, 0xf3, 0x28, 0x9d, 0xc0, 0xc8, 0x56,
	0xb5, 0x30, 0x65, 0x68, 0x96, 0x9e, 0xfa, 0xb2, 0x1d, 0x12, 0xba, 0x9b, 0xc0, 0x0e, 0x37, 0xa5,
	0xeb, 0x6c, 0xb8, 0xb4, 0x3f, 0xe9, 0x57, 0x20, 0xe7, 0x5c, 0xa1, 0xd4, 0x17, 0xe2, 0x0a, 0xf9,
	0x03, 0xfe, 0x14, 0xf2, 0x14, 0x76, 0xb5, 0xd5, 0x86, 0x56, 0xfd, 0x81, 0xce, 0xe0, 0x49, 0xc7,
	0x27, 0x3c, 0x78, 0x04, 0x03, 0x89, 0xca, 0x5c, 0xeb, 0x60, 0x13, 0x4e, 0xf4, 0x3d, 0x44, 0x0f,
	0x7d, 0x90, 0xbe, 0x81, 0x61, 0xd7, 0xb4, 0x4d, 0xd0, 0xdb, 0x4a, 0xf0, 0xe1, 0x6f, 0x1f, 0x22,
	0x3b, 0xef, 0x32, 0xec, 0x1e, 0xf9, 0x02, 0x87, 0xdf, 0x50, 0x37, 0xfb, 0x43, 0xe2, 0x79, 0xd8,
	0xc2, 0xf9, 0xad, 0x15, 0x9c, 0xbe, 0xb8, 0x87, 0xf1, 0x4f, 0xd1, 0x47, 0xe4, 0x0c, 0x20, 0xb8,
	0x2c, 0x4c, 0x49, 0x9e, 0x77, 0xa4, 0x9b, 0xb2, 0xa7, 0xf1, 0x5d, 0xa2, 0xb5, 0x58, 0xc0, 0xd8,
	0x77, 0x63, 0x29, 0x37, 0x0a, 0x39, 0x6e, 0xe5, 0x77, 0xdb, 0x9f, 0xbe, 0xbc, 0x9f, 0x6c, 0xfd,
	0x3e, 0x41, 0x14, 0x22, 0x79, 0xb3, 0x67, 0xad, 0xbe, 0x63, 0x73, 0x74, 0x1b, 0x6e, 0x0c, 0xf2,
	0x81, 0xfb, 0x2c, 0x3f, 0xfe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xbe, 0x84, 0xf5, 0x2a, 0xda, 0x03,
	0x00, 0x00,
}
