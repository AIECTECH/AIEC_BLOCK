// Code generated by protoc-gen-go. DO NOT EDIT.
// source: requirement.proto

/*
Package requirement is a generated protocol buffer package.

It is generated from these files:
	requirement.proto

It has these top-level messages:
	PublishRequest
	PublishResponse
	QueryRequest
	QueryResponse
	QueryData
	QueryRow
*/
package requirement

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PublishRequest struct {
	//    string username = 1;
	//    string requirement_name = 2;
	//    string feature_tag = 3;
	//    string sample_path = 4;
	//    string sample_hash = 5;
	//    string expire_time = 6;
	//    string price = 7;
	//    string description = 8;
	//    string publish_date = 9;
	//    string signature = 10;
	Body string `protobuf:"bytes,1,opt,name=body" json:"body"`
}

func (m *PublishRequest) Reset()                    { *m = PublishRequest{} }
func (m *PublishRequest) String() string            { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()               {}
func (*PublishRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PublishRequest) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type PublishResponse struct {
	Code int32  `protobuf:"varint,1,opt,name=code" json:"code"`
	Data string `protobuf:"bytes,2,opt,name=data" json:"data"`
	Msg  string `protobuf:"bytes,3,opt,name=msg" json:"msg"`
}

func (m *PublishResponse) Reset()                    { *m = PublishResponse{} }
func (m *PublishResponse) String() string            { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()               {}
func (*PublishResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PublishResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *PublishResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *PublishResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type QueryRequest struct {
	PageSize   int32  `protobuf:"varint,1,opt,name=pageSize" json:"pageSize"`
	PageNum    int32  `protobuf:"varint,2,opt,name=pageNum" json:"pageNum"`
	Username   string `protobuf:"bytes,3,opt,name=username" json:"username"`
	FeatureTag uint64 `protobuf:"varint,4,opt,name=feature_tag,json=featureTag" json:"feature_tag"`
}

func (m *QueryRequest) Reset()                    { *m = QueryRequest{} }
func (m *QueryRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()               {}
func (*QueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *QueryRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *QueryRequest) GetPageNum() int32 {
	if m != nil {
		return m.PageNum
	}
	return 0
}

func (m *QueryRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *QueryRequest) GetFeatureTag() uint64 {
	if m != nil {
		return m.FeatureTag
	}
	return 0
}

type QueryResponse struct {
	Code int32      `protobuf:"varint,1,opt,name=code" json:"code"`
	Data *QueryData `protobuf:"bytes,2,opt,name=data" json:"data"`
	Msg  string     `protobuf:"bytes,3,opt,name=msg" json:"msg"`
}

func (m *QueryResponse) Reset()                    { *m = QueryResponse{} }
func (m *QueryResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()               {}
func (*QueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *QueryResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *QueryResponse) GetData() *QueryData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *QueryResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type QueryData struct {
	PageNum  uint64      `protobuf:"varint,1,opt,name=pageNum" json:"pageNum"`
	RowCount uint64      `protobuf:"varint,2,opt,name=rowCount" json:"rowCount"`
	Row      []*QueryRow `protobuf:"bytes,3,rep,name=row" json:"row"`
}

func (m *QueryData) Reset()                    { *m = QueryData{} }
func (m *QueryData) String() string            { return proto.CompactTextString(m) }
func (*QueryData) ProtoMessage()               {}
func (*QueryData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *QueryData) GetPageNum() uint64 {
	if m != nil {
		return m.PageNum
	}
	return 0
}

func (m *QueryData) GetRowCount() uint64 {
	if m != nil {
		return m.RowCount
	}
	return 0
}

func (m *QueryData) GetRow() []*QueryRow {
	if m != nil {
		return m.Row
	}
	return nil
}

type QueryRow struct {
	RequirementId   string `protobuf:"bytes,1,opt,name=requirement_id,json=requirementId" json:"requirement_id"`
	Username        string `protobuf:"bytes,2,opt,name=username" json:"username"`
	RequirementName string `protobuf:"bytes,3,opt,name=requirement_name,json=requirementName" json:"requirement_name"`
	FeatureTag      uint64 `protobuf:"varint,4,opt,name=feature_tag,json=featureTag" json:"feature_tag"`
	SamplePath      string `protobuf:"bytes,5,opt,name=sample_path,json=samplePath" json:"sample_path"`
	SampleHash      string `protobuf:"bytes,6,opt,name=sample_hash,json=sampleHash" json:"sample_hash"`
	ExpireTime      uint32 `protobuf:"varint,7,opt,name=expire_time,json=expireTime" json:"expire_time"`
	Price           uint64 `protobuf:"varint,8,opt,name=price" json:"price"`
	Description     string `protobuf:"bytes,9,opt,name=description" json:"description"`
	PublishDate     uint32 `protobuf:"varint,10,opt,name=publish_date,json=publishDate" json:"publish_date"`
}

func (m *QueryRow) Reset()                    { *m = QueryRow{} }
func (m *QueryRow) String() string            { return proto.CompactTextString(m) }
func (*QueryRow) ProtoMessage()               {}
func (*QueryRow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *QueryRow) GetRequirementId() string {
	if m != nil {
		return m.RequirementId
	}
	return ""
}

func (m *QueryRow) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *QueryRow) GetRequirementName() string {
	if m != nil {
		return m.RequirementName
	}
	return ""
}

func (m *QueryRow) GetFeatureTag() uint64 {
	if m != nil {
		return m.FeatureTag
	}
	return 0
}

func (m *QueryRow) GetSamplePath() string {
	if m != nil {
		return m.SamplePath
	}
	return ""
}

func (m *QueryRow) GetSampleHash() string {
	if m != nil {
		return m.SampleHash
	}
	return ""
}

func (m *QueryRow) GetExpireTime() uint32 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

func (m *QueryRow) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *QueryRow) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *QueryRow) GetPublishDate() uint32 {
	if m != nil {
		return m.PublishDate
	}
	return 0
}

func init() {
	proto.RegisterType((*PublishRequest)(nil), "PublishRequest")
	proto.RegisterType((*PublishResponse)(nil), "PublishResponse")
	proto.RegisterType((*QueryRequest)(nil), "QueryRequest")
	proto.RegisterType((*QueryResponse)(nil), "QueryResponse")
	proto.RegisterType((*QueryData)(nil), "QueryData")
	proto.RegisterType((*QueryRow)(nil), "QueryRow")
}

func init() { proto.RegisterFile("requirement.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 453 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0xde, 0x34, 0xcd, 0xb6, 0x9d, 0x6c, 0x7f, 0xb0, 0x38, 0x58, 0x45, 0x82, 0x10, 0x81, 0x14,
	0x2e, 0x39, 0x94, 0x47, 0x60, 0x0f, 0x20, 0xa4, 0xd5, 0x62, 0x96, 0x2b, 0x95, 0xdb, 0x0c, 0x89,
	0xa5, 0x4d, 0x9c, 0xb5, 0x1d, 0x95, 0xe5, 0xc6, 0x53, 0xf2, 0x3a, 0x28, 0x4e, 0x1a, 0xdc, 0x4a,
	0x20, 0x6e, 0x33, 0x9f, 0xbe, 0xf9, 0xe6, 0x1f, 0x9e, 0x28, 0x7c, 0x68, 0x84, 0xc2, 0x12, 0x2b,
	0x93, 0xd6, 0x4a, 0x1a, 0x19, 0xbf, 0x82, 0xc5, 0x6d, 0xb3, 0xbb, 0x17, 0xba, 0x60, 0xf8, 0xd0,
	0xa0, 0x36, 0x84, 0xc0, 0x78, 0x27, 0xb3, 0x47, 0xea, 0x45, 0x5e, 0x32, 0x63, 0xd6, 0x8e, 0x3f,
	0xc2, 0x72, 0x60, 0xe9, 0x5a, 0x56, 0x1a, 0x5b, 0xda, 0x5e, 0x66, 0x68, 0x69, 0x01, 0xb3, 0x76,
	0x8b, 0x65, 0xdc, 0x70, 0x3a, 0xea, 0x42, 0x5b, 0x9b, 0xac, 0xc0, 0x2f, 0x75, 0x4e, 0x7d, 0x0b,
	0xb5, 0x66, 0xfc, 0xd3, 0x83, 0xab, 0x4f, 0x0d, 0xaa, 0xc7, 0x63, 0xc6, 0x35, 0x4c, 0x6b, 0x9e,
	0xe3, 0x67, 0xf1, 0xe3, 0x28, 0x37, 0xf8, 0x84, 0xc2, 0xa4, 0xb5, 0x6f, 0x9a, 0xd2, 0xaa, 0x06,
	0xec, 0xe8, 0xb6, 0x51, 0x8d, 0x46, 0x55, 0xf1, 0x12, 0x7b, 0xf5, 0xc1, 0x27, 0x2f, 0x20, 0xfc,
	0x86, 0xdc, 0x34, 0x0a, 0xb7, 0x86, 0xe7, 0x74, 0x1c, 0x79, 0xc9, 0x98, 0x41, 0x0f, 0xdd, 0xf1,
	0x3c, 0xfe, 0x02, 0xf3, 0xbe, 0x84, 0x7f, 0xb4, 0xf3, 0xdc, 0x69, 0x27, 0xdc, 0x40, 0x6a, 0x23,
	0xae, 0xb9, 0xe1, 0x7f, 0x6d, 0xed, 0x2b, 0xcc, 0x06, 0x92, 0x5b, 0xba, 0x67, 0x0b, 0x70, 0x4b,
	0x57, 0xf2, 0xf0, 0x4e, 0x36, 0x95, 0xb1, 0xe2, 0x63, 0x36, 0xf8, 0xe4, 0x19, 0xf8, 0x4a, 0x1e,
	0xa8, 0x1f, 0xf9, 0x49, 0xb8, 0x99, 0x75, 0x39, 0x99, 0x3c, 0xb0, 0x16, 0x8d, 0x7f, 0x8d, 0x60,
	0x7a, 0x44, 0xc8, 0x6b, 0x58, 0x38, 0xfb, 0xdc, 0x8a, 0xac, 0x5f, 0xd9, 0xdc, 0x41, 0x3f, 0x64,
	0x27, 0x73, 0x1a, 0x9d, 0xcd, 0xe9, 0x0d, 0xac, 0x5c, 0x09, 0x67, 0x96, 0x4b, 0x07, 0xbf, 0xf9,
	0x9f, 0x91, 0xb6, 0x04, 0xcd, 0xcb, 0xfa, 0x1e, 0xb7, 0x35, 0x37, 0x05, 0x0d, 0xac, 0x0c, 0x74,
	0xd0, 0x2d, 0x37, 0x85, 0x43, 0x28, 0xb8, 0x2e, 0xe8, 0xa5, 0x4b, 0x78, 0xcf, 0xb5, 0x25, 0xe0,
	0xf7, 0x5a, 0xb4, 0x19, 0x44, 0x89, 0x74, 0x12, 0x79, 0xc9, 0x9c, 0x41, 0x07, 0xdd, 0x89, 0x12,
	0xc9, 0x53, 0x08, 0x6a, 0x25, 0xf6, 0x48, 0xa7, 0x36, 0x7b, 0xe7, 0x90, 0x08, 0xc2, 0x0c, 0xf5,
	0x5e, 0x89, 0xda, 0x08, 0x59, 0xd1, 0x99, 0xd5, 0x75, 0x21, 0xf2, 0x12, 0xae, 0xea, 0xee, 0x7c,
	0xb7, 0x19, 0x37, 0x48, 0xc1, 0x2a, 0x87, 0x3d, 0x76, 0xcd, 0x0d, 0x6e, 0x72, 0x08, 0xd9, 0x9f,
	0x8e, 0x49, 0x0a, 0x93, 0xfe, 0xe0, 0xc9, 0x32, 0x3d, 0x7d, 0x90, 0xf5, 0x2a, 0x3d, 0xfb, 0x85,
	0xf8, 0x82, 0x24, 0x10, 0xd8, 0xbd, 0x90, 0x79, 0xea, 0x9e, 0xf6, 0x7a, 0x91, 0x9e, 0x9c, 0x59,
	0x7c, 0xb1, 0xbb, 0xb4, 0x7f, 0xf7, 0xf6, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x12, 0xd8,
	0x5d, 0x8c, 0x03, 0x00, 0x00,
}
