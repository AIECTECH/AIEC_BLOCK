// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user.proto

/*
Package user is a generated protocol buffer package.

It is generated from these files:
	user.proto

It has these top-level messages:
	RegisterRequest
	UserInfo
	RegisterResponse
	LoginRequest
	LoginResponse
	GetUserInfoRequest
	GetUserInfoResponse
	GetBlockInfoRequest
	GetBlockInfoResponse
	UpdateUserInfoRequest
	UpdateUserInfoResponse
	BlockInfo
	GetDataBinRequest
	GetDataBinResponse
	Bin
	LogoutRequest
	LogoutResponse
	VerifyTokenRequest
	VerifyTokenResponse
	FavoriteMngRequest
	FavoriteMngResponse
	AddShopCarRequest
	AddShopCarResponse
	AddNoticeRequest
	AddNoticeResponse
	QueryFavoriteRequest
	QueryFavoriteResponse
	FavoriteData
	FavoriteRowData
	QueryShopCarRequest
	QueryShopCarResponse
	ShopCarData
	ShopCarRow
	QueryNoticeRequest
	QueryNoticeResponse
	QueryNoticeData
	QueryNoticeRow
	GetAccountRequest
	GetAccountResponse
	TransferRequest
	TransferResponse
	QueryTransferRequest
	QueryTransferResponse
	TransferData
	TransferRow
*/
package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for User service

type UserClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...client.CallOption) (*LogoutResponse, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...client.CallOption) (*GetUserInfoResponse, error)
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...client.CallOption) (*UpdateUserInfoResponse, error)
	GetBlockInfo(ctx context.Context, in *GetBlockInfoRequest, opts ...client.CallOption) (*GetBlockInfoResponse, error)
	GetDataBin(ctx context.Context, in *GetDataBinRequest, opts ...client.CallOption) (*GetDataBinResponse, error)
	VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...client.CallOption) (*VerifyTokenResponse, error)
	FavoriteMng(ctx context.Context, in *FavoriteMngRequest, opts ...client.CallOption) (*FavoriteMngResponse, error)
	AddShopCar(ctx context.Context, in *AddShopCarRequest, opts ...client.CallOption) (*AddShopCarResponse, error)
	AddNotice(ctx context.Context, in *AddNoticeRequest, opts ...client.CallOption) (*AddNoticeResponse, error)
	QueryFavorite(ctx context.Context, in *QueryFavoriteRequest, opts ...client.CallOption) (*QueryFavoriteResponse, error)
	QueryShopCar(ctx context.Context, in *QueryShopCarRequest, opts ...client.CallOption) (*QueryShopCarResponse, error)
	QueryNotice(ctx context.Context, in *QueryNoticeRequest, opts ...client.CallOption) (*QueryNoticeResponse, error)
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...client.CallOption) (*GetAccountResponse, error)
	Transfer(ctx context.Context, in *TransferRequest, opts ...client.CallOption) (*TransferResponse, error)
	QueryTransfer(ctx context.Context, in *QueryTransferRequest, opts ...client.CallOption) (*QueryTransferResponse, error)
}

type userClient struct {
	c           client.Client
	serviceName string
}

func NewUserClient(serviceName string, c client.Client) UserClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "user"
	}
	return &userClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *userClient) Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.Register", in)
	out := new(RegisterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.Login", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Logout(ctx context.Context, in *LogoutRequest, opts ...client.CallOption) (*LogoutResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.Logout", in)
	out := new(LogoutResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...client.CallOption) (*GetUserInfoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.GetUserInfo", in)
	out := new(GetUserInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...client.CallOption) (*UpdateUserInfoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.UpdateUserInfo", in)
	out := new(UpdateUserInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetBlockInfo(ctx context.Context, in *GetBlockInfoRequest, opts ...client.CallOption) (*GetBlockInfoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.GetBlockInfo", in)
	out := new(GetBlockInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetDataBin(ctx context.Context, in *GetDataBinRequest, opts ...client.CallOption) (*GetDataBinResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.GetDataBin", in)
	out := new(GetDataBinResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...client.CallOption) (*VerifyTokenResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.VerifyToken", in)
	out := new(VerifyTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FavoriteMng(ctx context.Context, in *FavoriteMngRequest, opts ...client.CallOption) (*FavoriteMngResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.FavoriteMng", in)
	out := new(FavoriteMngResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddShopCar(ctx context.Context, in *AddShopCarRequest, opts ...client.CallOption) (*AddShopCarResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.AddShopCar", in)
	out := new(AddShopCarResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddNotice(ctx context.Context, in *AddNoticeRequest, opts ...client.CallOption) (*AddNoticeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.AddNotice", in)
	out := new(AddNoticeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) QueryFavorite(ctx context.Context, in *QueryFavoriteRequest, opts ...client.CallOption) (*QueryFavoriteResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.QueryFavorite", in)
	out := new(QueryFavoriteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) QueryShopCar(ctx context.Context, in *QueryShopCarRequest, opts ...client.CallOption) (*QueryShopCarResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.QueryShopCar", in)
	out := new(QueryShopCarResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) QueryNotice(ctx context.Context, in *QueryNoticeRequest, opts ...client.CallOption) (*QueryNoticeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.QueryNotice", in)
	out := new(QueryNoticeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...client.CallOption) (*GetAccountResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.GetAccount", in)
	out := new(GetAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Transfer(ctx context.Context, in *TransferRequest, opts ...client.CallOption) (*TransferResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.Transfer", in)
	out := new(TransferResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) QueryTransfer(ctx context.Context, in *QueryTransferRequest, opts ...client.CallOption) (*QueryTransferResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.QueryTransfer", in)
	out := new(QueryTransferResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	Register(context.Context, *RegisterRequest, *RegisterResponse) error
	Login(context.Context, *LoginRequest, *LoginResponse) error
	Logout(context.Context, *LogoutRequest, *LogoutResponse) error
	GetUserInfo(context.Context, *GetUserInfoRequest, *GetUserInfoResponse) error
	UpdateUserInfo(context.Context, *UpdateUserInfoRequest, *UpdateUserInfoResponse) error
	GetBlockInfo(context.Context, *GetBlockInfoRequest, *GetBlockInfoResponse) error
	GetDataBin(context.Context, *GetDataBinRequest, *GetDataBinResponse) error
	VerifyToken(context.Context, *VerifyTokenRequest, *VerifyTokenResponse) error
	FavoriteMng(context.Context, *FavoriteMngRequest, *FavoriteMngResponse) error
	AddShopCar(context.Context, *AddShopCarRequest, *AddShopCarResponse) error
	AddNotice(context.Context, *AddNoticeRequest, *AddNoticeResponse) error
	QueryFavorite(context.Context, *QueryFavoriteRequest, *QueryFavoriteResponse) error
	QueryShopCar(context.Context, *QueryShopCarRequest, *QueryShopCarResponse) error
	QueryNotice(context.Context, *QueryNoticeRequest, *QueryNoticeResponse) error
	GetAccount(context.Context, *GetAccountRequest, *GetAccountResponse) error
	Transfer(context.Context, *TransferRequest, *TransferResponse) error
	QueryTransfer(context.Context, *QueryTransferRequest, *QueryTransferResponse) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&User{hdlr}, opts...))
}

type User struct {
	UserHandler
}

func (h *User) Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error {
	return h.UserHandler.Register(ctx, in, out)
}

func (h *User) Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error {
	return h.UserHandler.Login(ctx, in, out)
}

func (h *User) Logout(ctx context.Context, in *LogoutRequest, out *LogoutResponse) error {
	return h.UserHandler.Logout(ctx, in, out)
}

func (h *User) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, out *GetUserInfoResponse) error {
	return h.UserHandler.GetUserInfo(ctx, in, out)
}

func (h *User) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, out *UpdateUserInfoResponse) error {
	return h.UserHandler.UpdateUserInfo(ctx, in, out)
}

func (h *User) GetBlockInfo(ctx context.Context, in *GetBlockInfoRequest, out *GetBlockInfoResponse) error {
	return h.UserHandler.GetBlockInfo(ctx, in, out)
}

func (h *User) GetDataBin(ctx context.Context, in *GetDataBinRequest, out *GetDataBinResponse) error {
	return h.UserHandler.GetDataBin(ctx, in, out)
}

func (h *User) VerifyToken(ctx context.Context, in *VerifyTokenRequest, out *VerifyTokenResponse) error {
	return h.UserHandler.VerifyToken(ctx, in, out)
}

func (h *User) FavoriteMng(ctx context.Context, in *FavoriteMngRequest, out *FavoriteMngResponse) error {
	return h.UserHandler.FavoriteMng(ctx, in, out)
}

func (h *User) AddShopCar(ctx context.Context, in *AddShopCarRequest, out *AddShopCarResponse) error {
	return h.UserHandler.AddShopCar(ctx, in, out)
}

func (h *User) AddNotice(ctx context.Context, in *AddNoticeRequest, out *AddNoticeResponse) error {
	return h.UserHandler.AddNotice(ctx, in, out)
}

func (h *User) QueryFavorite(ctx context.Context, in *QueryFavoriteRequest, out *QueryFavoriteResponse) error {
	return h.UserHandler.QueryFavorite(ctx, in, out)
}

func (h *User) QueryShopCar(ctx context.Context, in *QueryShopCarRequest, out *QueryShopCarResponse) error {
	return h.UserHandler.QueryShopCar(ctx, in, out)
}

func (h *User) QueryNotice(ctx context.Context, in *QueryNoticeRequest, out *QueryNoticeResponse) error {
	return h.UserHandler.QueryNotice(ctx, in, out)
}

func (h *User) GetAccount(ctx context.Context, in *GetAccountRequest, out *GetAccountResponse) error {
	return h.UserHandler.GetAccount(ctx, in, out)
}

func (h *User) Transfer(ctx context.Context, in *TransferRequest, out *TransferResponse) error {
	return h.UserHandler.Transfer(ctx, in, out)
}

func (h *User) QueryTransfer(ctx context.Context, in *QueryTransferRequest, out *QueryTransferResponse) error {
	return h.UserHandler.QueryTransfer(ctx, in, out)
}
